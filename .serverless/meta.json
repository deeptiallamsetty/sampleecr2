{
  "C:\\Users\\Deepti\\Desktop\\Cloud Computing\\projects\\sampleecr2": {
    "versionSfCore": null,
    "versionFramework": "4.4.19",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "sls": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "sampleecr2",
            "provider": {
              "environment": {
                "DATABASE_URL": "mysql+pymysql://admin:admin123@terraform-20250116192216465000000001.cxac8gmue0ap.us-east-1.rds.amazonaws.com:3306/flaskdb",
                "JWT_SECRET_KEY": "<REDACTED>"
              },
              "name": "aws",
              "runtime": "python3.9",
              "region": "us-east-1",
              "ecr": {
                "images": {
                  "sampleecr2": {
                    "path": "."
                  }
                }
              },
              "stage": "dev",
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ApiLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/sampleecr2-dev-api"
                    }
                  },
                  "AppLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/sampleecr2-dev-app"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "sampleecr2",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sampleecr2-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sampleecr2-dev*:*:*"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "sampleecr2",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "AppLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "serverless-framework-deployments-us-east-1-7673889a-7382",
                        "S3Key": "serverless/sampleecr2/dev/1737063750113-2025-01-16T21:42:30.113Z/sampleecr2.zip"
                      },
                      "Handler": "wsgi_handler.handler",
                      "Runtime": "python3.9",
                      "FunctionName": "sampleecr2-dev-app",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "DATABASE_URL": "mysql+pymysql://admin:admin123@terraform-20250116192216465000000001.cxac8gmue0ap.us-east-1.rds.amazonaws.com:3306/flaskdb",
                          "JWT_SECRET_KEY": "<REDACTED>"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AppLogGroup"
                    ]
                  },
                  "AppLambdaVersionoeHD7n9bFFPGWF1Bm10M1uzM2h5yeOOM1n7nSNT578": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AppLambdaFunction"
                      },
                      "CodeSha256": "aa2oHMaMobs+lK7c+X1j3cblBYrRnB/nf2ekXj0Q/aY="
                    }
                  },
                  "ApiLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "ImageUri": "982534355171.dkr.ecr.us-east-1.amazonaws.com/serverless-sampleecr2-dev@sha256:b274f92e2cf205510e7b0327deb84e1e7cdf198bab844f9f0994af10508952d6"
                      },
                      "PackageType": "Image",
                      "FunctionName": "sampleecr2-dev-api",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "DATABASE_URL": "mysql+pymysql://admin:admin123@terraform-20250116192216465000000001.cxac8gmue0ap.us-east-1.rds.amazonaws.com:3306/flaskdb",
                          "JWT_SECRET_KEY": "<REDACTED>"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "ApiLogGroup"
                    ]
                  },
                  "ApiLambdaVersiongDSdpo8dzyjLGW19R8cPpWgAY1vmjNFfukpIIlJ5Y": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "ApiLambdaFunction"
                      },
                      "CodeSha256": "b274f92e2cf205510e7b0327deb84e1e7cdf198bab844f9f0994af10508952d6"
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-sampleecr2",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayMethodGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AppLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AppLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1737063700841": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodGet"
                    ]
                  },
                  "AppLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AppLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApi": {
                    "Type": "AWS::ApiGatewayV2::Api",
                    "Properties": {
                      "Name": "dev-sampleecr2",
                      "ProtocolType": "HTTP"
                    }
                  },
                  "HttpApiStage": {
                    "Type": "AWS::ApiGatewayV2::Stage",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "StageName": "$default",
                      "AutoDeploy": true,
                      "DefaultRouteSettings": {
                        "DetailedMetricsEnabled": false
                      }
                    }
                  },
                  "AppLambdaPermissionHttpApi": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AppLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "HttpApi"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  },
                  "HttpApiIntegrationApp": {
                    "Type": "AWS::ApiGatewayV2::Integration",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "IntegrationType": "AWS_PROXY",
                      "IntegrationUri": {
                        "Fn::GetAtt": [
                          "AppLambdaFunction",
                          "Arn"
                        ]
                      },
                      "PayloadFormatVersion": "2.0",
                      "TimeoutInMillis": 30000
                    }
                  },
                  "HttpApiRoutePostRefresh": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "POST /refresh",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationApp"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationApp"
                  },
                  "HttpApiRoutePostLogin": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "POST /login",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationApp"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationApp"
                  },
                  "HttpApiRouteGetProtected": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /protected",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationApp"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationApp"
                  },
                  "HttpApiRouteAnyProxyVar": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "ANY /{proxy+}",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationApp"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationApp"
                  },
                  "HttpApiRoutePostTodo": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "POST /todo",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationApp"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationApp"
                  },
                  "HttpApiRouteGetTodo": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "GET /todo",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationApp"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationApp"
                  },
                  "HttpApiRoutePutTodoTaskidVar": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "PUT /todo/{task_id}",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationApp"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationApp"
                  },
                  "HttpApiRouteDeleteTodoTaskidVar": {
                    "Type": "AWS::ApiGatewayV2::Route",
                    "Properties": {
                      "ApiId": {
                        "Ref": "HttpApi"
                      },
                      "RouteKey": "DELETE /todo/{task_id}",
                      "Target": {
                        "Fn::Join": [
                          "/",
                          [
                            "integrations",
                            {
                              "Ref": "HttpApiIntegrationApp"
                            }
                          ]
                        ]
                      }
                    },
                    "DependsOn": "HttpApiIntegrationApp"
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "serverless-framework-deployments-us-east-1-7673889a-7382",
                    "Export": {
                      "Name": "sls-sampleecr2-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "AppLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AppLambdaVersionoeHD7n9bFFPGWF1Bm10M1uzM2h5yeOOM1n7nSNT578"
                    },
                    "Export": {
                      "Name": "sls-sampleecr2-dev-AppLambdaFunctionQualifiedArn"
                    }
                  },
                  "ApiLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "ApiLambdaVersiongDSdpo8dzyjLGW19R8cPpWgAY1vmjNFfukpIIlJ5Y"
                    },
                    "Export": {
                      "Name": "sls-sampleecr2-dev-ApiLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-sampleecr2-dev-ServiceEndpoint"
                    }
                  },
                  "HttpApiId": {
                    "Description": "Id of the HTTP API",
                    "Value": {
                      "Ref": "HttpApi"
                    },
                    "Export": {
                      "Name": "sls-sampleecr2-dev-HttpApiId"
                    }
                  },
                  "HttpApiUrl": {
                    "Description": "URL of the HTTP API",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "HttpApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          }
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-sampleecr2-dev-HttpApiUrl"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "plugins": [
              "serverless-wsgi",
              "serverless-python-requirements"
            ],
            "custom": {
              "wsgi": {
                "app": "app.app",
                "packRequirements": false
              },
              "pythonRequirements": {
                "dockerizePip": false
              }
            },
            "functions": {
              "api": {
                "image": {
                  "name": "sampleecr2"
                },
                "events": [],
                "name": "sampleecr2-dev-api",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "vpc": {},
                "versionLogicalId": "ApiLambdaVersiongDSdpo8dzyjLGW19R8cPpWgAY1vmjNFfukpIIlJ5Y"
              },
              "app": {
                "handler": "wsgi_handler.handler",
                "events": [
                  {
                    "http": {
                      "path": "",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  },
                  {
                    "httpApi": {
                      "path": "/refresh",
                      "method": "POST"
                    },
                    "resolvedMethod": "POST",
                    "resolvedPath": "/refresh"
                  },
                  {
                    "httpApi": {
                      "path": "/login",
                      "method": "POST"
                    },
                    "resolvedMethod": "POST",
                    "resolvedPath": "/login"
                  },
                  {
                    "httpApi": {
                      "path": "/protected",
                      "method": "GET"
                    },
                    "resolvedMethod": "GET",
                    "resolvedPath": "/protected"
                  },
                  {
                    "httpApi": {
                      "path": "/{proxy+}",
                      "method": "ANY"
                    },
                    "resolvedMethod": "ANY",
                    "resolvedPath": "/{proxy+}"
                  },
                  {
                    "httpApi": {
                      "path": "/todo",
                      "method": "POST"
                    },
                    "resolvedMethod": "POST",
                    "resolvedPath": "/todo"
                  },
                  {
                    "httpApi": {
                      "path": "/todo",
                      "method": "GET"
                    },
                    "resolvedMethod": "GET",
                    "resolvedPath": "/todo"
                  },
                  {
                    "httpApi": {
                      "path": "/todo/{task_id}",
                      "method": "PUT"
                    },
                    "resolvedMethod": "PUT",
                    "resolvedPath": "/todo/{task_id}"
                  },
                  {
                    "httpApi": {
                      "path": "/todo/{task_id}",
                      "method": "DELETE"
                    },
                    "resolvedMethod": "DELETE",
                    "resolvedPath": "/todo/{task_id}"
                  }
                ],
                "name": "sampleecr2-dev-app",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "python3.9",
                "vpc": {},
                "versionLogicalId": "AppLambdaVersionoeHD7n9bFFPGWF1Bm10M1uzM2h5yeOOM1n7nSNT578"
              }
            }
          },
          "configFileDirPath": "C:\\Users\\Deepti\\Desktop\\Cloud Computing\\projects\\sampleecr2",
          "config": {
            "type": "sls"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:sls",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\Deepti\\Desktop\\Cloud Computing\\projects\\sampleecr2",
    "serviceConfigFileName": "serverless.yaml",
    "service": {
      "service": "sampleecr2",
      "provider": {
        "environment": {
          "DATABASE_URL": "mysql+pymysql://admin:admin123@terraform-20250116192216465000000001.cxac8gmue0ap.us-east-1.rds.amazonaws.com:3306/flaskdb",
          "JWT_SECRET_KEY": "<REDACTED>"
        },
        "name": "aws",
        "runtime": "python3.9",
        "region": "us-east-1",
        "ecr": {
          "images": {
            "sampleecr2": {
              "path": "."
            }
          }
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/sampleecr2-dev-api"
              }
            },
            "AppLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/sampleecr2-dev-app"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "sampleecr2",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sampleecr2-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sampleecr2-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "sampleecr2",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "AppLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-7673889a-7382",
                  "S3Key": "serverless/sampleecr2/dev/1737063750113-2025-01-16T21:42:30.113Z/sampleecr2.zip"
                },
                "Handler": "wsgi_handler.handler",
                "Runtime": "python3.9",
                "FunctionName": "sampleecr2-dev-app",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DATABASE_URL": "mysql+pymysql://admin:admin123@terraform-20250116192216465000000001.cxac8gmue0ap.us-east-1.rds.amazonaws.com:3306/flaskdb",
                    "JWT_SECRET_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AppLogGroup"
              ]
            },
            "AppLambdaVersionoeHD7n9bFFPGWF1Bm10M1uzM2h5yeOOM1n7nSNT578": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AppLambdaFunction"
                },
                "CodeSha256": "aa2oHMaMobs+lK7c+X1j3cblBYrRnB/nf2ekXj0Q/aY="
              }
            },
            "ApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "ImageUri": "982534355171.dkr.ecr.us-east-1.amazonaws.com/serverless-sampleecr2-dev@sha256:b274f92e2cf205510e7b0327deb84e1e7cdf198bab844f9f0994af10508952d6"
                },
                "PackageType": "Image",
                "FunctionName": "sampleecr2-dev-api",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DATABASE_URL": "mysql+pymysql://admin:admin123@terraform-20250116192216465000000001.cxac8gmue0ap.us-east-1.rds.amazonaws.com:3306/flaskdb",
                    "JWT_SECRET_KEY": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ApiLogGroup"
              ]
            },
            "ApiLambdaVersiongDSdpo8dzyjLGW19R8cPpWgAY1vmjNFfukpIIlJ5Y": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ApiLambdaFunction"
                },
                "CodeSha256": "b274f92e2cf205510e7b0327deb84e1e7cdf198bab844f9f0994af10508952d6"
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-sampleecr2",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayMethodGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1737063700841": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodGet"
              ]
            },
            "AppLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AppLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-sampleecr2",
                "ProtocolType": "HTTP"
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "AppLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AppLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationApp": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "AppLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostRefresh": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /refresh",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApp"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApp"
            },
            "HttpApiRoutePostLogin": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /login",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApp"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApp"
            },
            "HttpApiRouteGetProtected": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /protected",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApp"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApp"
            },
            "HttpApiRouteAnyProxyVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "ANY /{proxy+}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApp"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApp"
            },
            "HttpApiRoutePostTodo": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /todo",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApp"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApp"
            },
            "HttpApiRouteGetTodo": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /todo",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApp"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApp"
            },
            "HttpApiRoutePutTodoTaskidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PUT /todo/{task_id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApp"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApp"
            },
            "HttpApiRouteDeleteTodoTaskidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /todo/{task_id}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApp"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApp"
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-7673889a-7382",
              "Export": {
                "Name": "sls-sampleecr2-dev-ServerlessDeploymentBucketName"
              }
            },
            "AppLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AppLambdaVersionoeHD7n9bFFPGWF1Bm10M1uzM2h5yeOOM1n7nSNT578"
              },
              "Export": {
                "Name": "sls-sampleecr2-dev-AppLambdaFunctionQualifiedArn"
              }
            },
            "ApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ApiLambdaVersiongDSdpo8dzyjLGW19R8cPpWgAY1vmjNFfukpIIlJ5Y"
              },
              "Export": {
                "Name": "sls-sampleecr2-dev-ApiLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-sampleecr2-dev-ServiceEndpoint"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-sampleecr2-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-sampleecr2-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "plugins": [
        "serverless-wsgi",
        "serverless-python-requirements"
      ],
      "custom": {
        "wsgi": {
          "app": "app.app",
          "packRequirements": false
        },
        "pythonRequirements": {
          "dockerizePip": false
        }
      },
      "functions": {
        "api": {
          "image": {
            "name": "sampleecr2"
          },
          "events": [],
          "name": "sampleecr2-dev-api",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "vpc": {},
          "versionLogicalId": "ApiLambdaVersiongDSdpo8dzyjLGW19R8cPpWgAY1vmjNFfukpIIlJ5Y"
        },
        "app": {
          "handler": "wsgi_handler.handler",
          "events": [
            {
              "http": {
                "path": "",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            },
            {
              "httpApi": {
                "path": "/refresh",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/refresh"
            },
            {
              "httpApi": {
                "path": "/login",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/login"
            },
            {
              "httpApi": {
                "path": "/protected",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/protected"
            },
            {
              "httpApi": {
                "path": "/{proxy+}",
                "method": "ANY"
              },
              "resolvedMethod": "ANY",
              "resolvedPath": "/{proxy+}"
            },
            {
              "httpApi": {
                "path": "/todo",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/todo"
            },
            {
              "httpApi": {
                "path": "/todo",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/todo"
            },
            {
              "httpApi": {
                "path": "/todo/{task_id}",
                "method": "PUT"
              },
              "resolvedMethod": "PUT",
              "resolvedPath": "/todo/{task_id}"
            },
            {
              "httpApi": {
                "path": "/todo/{task_id}",
                "method": "DELETE"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/todo/{task_id}"
            }
          ],
          "name": "sampleecr2-dev-app",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.9",
          "vpc": {},
          "versionLogicalId": "AppLambdaVersionoeHD7n9bFFPGWF1Bm10M1uzM2h5yeOOM1n7nSNT578"
        }
      }
    },
    "serviceRawFile": "service: sampleecr2\r\n#\r\nprovider:\r\n  environment:\r\n    DATABASE_URL: mysql+pymysql://admin:admin123@terraform-20250116192216465000000001.cxac8gmue0ap.us-east-1.rds.amazonaws.com:3306/flaskdb\r\n    JWT_SECRET_KEY: 123456\r\n  name: aws\r\n  runtime: python3.9\r\n  region: us-east-1\r\n  ecr:\r\n    images:\r\n      sampleecr2:\r\n        path: .\r\n\r\n\r\nplugins:\r\n  - serverless-wsgi\r\n  - serverless-python-requirements\r\n\r\ncustom:\r\n  wsgi:\r\n    app: app.app\r\n    packRequirements: false\r\n  pythonRequirements:\r\n    dockerizePip: false\r\n\r\nfunctions:\r\n  api:\r\n    image:\r\n      name: sampleecr2\r\n  app:\r\n    handler: wsgi.handler\r\n    events:\r\n      - http:\r\n          path: /\r\n          method: get\r\n      - httpApi:\r\n          path: /refresh\r\n          method: POST    \r\n      - httpApi:\r\n          path: /login\r\n          method: POST\r\n      - httpApi:\r\n          path: /protected\r\n          method: GET\r\n      - httpApi:\r\n          path: /{proxy+}\r\n          method: ANY\r\n      - httpApi:\r\n          path: /todo\r\n          method: POST\r\n      - httpApi:\r\n          path: /todo\r\n          method: GET\r\n      - httpApi:\r\n          path: /todo/{task_id}\r\n          method: PUT\r\n      - httpApi:\r\n          path: /todo/{task_id}\r\n          method: DELETE          ",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "7856d3b4b94e6d901bbca984085c8e97",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "27bcd3fd-98b8-4df9-a590-1cfde8559998",
    "orgName": "iamdeepti",
    "userId": "3H9b4c7HVtSgCFkMbB",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "iamdeepti",
    "subscription": null,
    "userEmail": "deepti.allamsetty@gmail.com",
    "serviceProviderAwsRegion": "us-east-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "982534355171",
    "projectType": "traditional",
    "versionSf": "4.4.19",
    "serviceProviderAwsCfStackName": "sampleecr2-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:us-east-1:982534355171:stack/sampleecr2-dev/00e6bb30-d453-11ef-adaa-12ca701b9c79",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:982534355171:stack/sampleecr2-dev/00e6bb30-d453-11ef-adaa-12ca701b9c79",
    "serviceProviderAwsCfStackCreated": "2025-01-16T21:44:03.574Z",
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:982534355171:function:sampleecr2-dev-api:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-sampleecr2-dev-ApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AppLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:982534355171:function:sampleecr2-dev-app:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-sampleecr2-dev-AppLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "ibhr9sv10h",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-sampleecr2-dev-HttpApiId"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://2t954477sl.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-sampleecr2-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-7673889a-7382",
        "ExportName": "sls-sampleecr2-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://ibhr9sv10h.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-sampleecr2-dev-HttpApiUrl"
      }
    ]
  }
}